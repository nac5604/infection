on script load:
	set team color of team named "a-humans" to yellow
	set team color of team named "b-zombies" to lime green
	set allow friendly fire team state of team named "a-humans" to false
	set allow friendly fire team state of team named "b-zombies" to false

every second:
	if {timeLeft} is more than or equal to 1 second:
		remove 1 second from {timeLeft}
	else if {timeLeft} is less than 1 second:
		endGame(world("world"))
		startGame(world("world"))

	loop all players:
		send action bar "&e%getTimeString({timeLeft})%" to loop-player

on respawn:
	heal player by 20
	teleport player to {map.loc}

	if team of player is team named "b-zombies":
		set metadata tag "invincible" of player to true

		set {_n} to 3
		set {_t} to 3
		loop {_n} times:
			send title "&e&lʀᴇsᴘᴀᴡɴɪɴɢ" with subtitle "&7%{_t}%" to player
			remove 1 from {_t}
			wait 1 second
		
		send title "" with subtitle "" to player
		
		set metadata tag "invincible" of player to false

on join:
	play sound "block.note_block.pling" with volume 2 at pitch 1 to all players where [input is op]
	set gamemode of player to adventure if player is not op
	set join message to ""

	teleport player to {map.loc}
	setTeamWithAutoDetect(player)
	updateScoreboard(player)

on quit:
	play sound "block.note_block.pling" with volume 2 at pitch 0.5 to all players where [input is op]
	set quit message to ""
	remove player from team entries of (team of player)

on death of a player:
	set death message to ""
	clear all potion effects of victim
	if attacker is a player:
		send action bar "&cKilled by %attacker%!" to victim
		add 1 to {deaths::%victim's uuid%}

		send action bar "&aKilled %victim%! &e+1" to attacker
		add 1 to {points::%attacker's uuid%}
		add 1 to {kills::%attacker's uuid%}
		add 1 to {game.kills::%attacker's uuid%}

		if team of victim is team named "a-humans":
			setTeam(victim, team named "b-zombies")

		if checkWinners(event-world, "%victim%") is team named "b-zombies":
			endGame(event-world)
			startGame(event-world)

		updateScoreboard(victim)
		updateScoreboard(attacker)

on drop:
	if player is not op:
		cancel event

on hunger meter change:
	cancel event

on damage:
	if metadata tag "invincible" of victim is true:
		cancel event
    
on player move:
	if metadata tag "invincible" of player is true:
		cancel event

function setTeam(p: player, t: team):
	add {_p} to team entries of {_t}

	clear {_p}'s inventory
	wait 2 ticks
	if {_t} is team named "a-humans":

		set helmet of {_p} to unbreakable chain helmet of curse of binding
		set chestplate of {_p} to unbreakable chain chestplate of curse of binding
		set leggings of {_p} to unbreakable chain leggings of curse of binding
		set boots of {_p} to unbreakable chain boots of curse of binding

		give stick named "&fBat" to {_p}

		give 8 golden apple to {_p}

function setTeamWithAutoDetect(p: player):
	set {_humans} to (size of team entries of team named "a-humans") ? 0
	set {_zombies} to (size of team entries of team named "b-zombies") ? 0

	set {_ratio} to mod({_humans} / {_zombies}, 1)

	if {_ratio} < 1:
		# if 1 zombie and 1 human are online, this should be false.
		if {_humans} < {_zombies}:
			setTeam({_p}, team named "a-humans")
			stop
		
		# if 1 zombie and 1 human are online, this should be true.
		else if {_humans} = {_zombies}:
			# if nobody is online, this should be true.
			if ({_humans} + {_zombies}) is 0:
				setTeam({_p}, team named "a-humans")    
				stop
	
	setTeam({_p}, team named "b-zombies")

function setTeams(w: world):
	loop all players:
		clear inventory of loop-player

	add all players in {_w} to team entries of team named "b-zombies"

	set {_humanCount} to ceil((size of team entries of team named "b-zombies") / 3) ? 1
		
	loop {_humanCount} times:
		set {_p} to random element of team entries of team named "b-zombies"
		remove {_p} from team entries of team named "b-zombies"
		wait 2 ticks
		setTeam({_p}, team named "a-humans")

function startGame(w: world):
	chooseMap()
	set {timeLeft} to 5 minutes

	setTeams({_w})

	broadcast "%newline%&7Map: &f%{map}% %newline%&7Author: &f%{map.auth}% %newline%" to {_w}

	teleport all players in {_w} to {map.loc}

function endGame(w: world):
	set {_winners} to checkWinners({_w}, "$$$")
	
	if {_winners} is team named "a-humans":
		send title "&eThe humans won!" to all players in world {_w}
	else if {_winners} is team named "b-zombies":
		send title "&aThe zombies won!" to all players in world {_w}

	loop all players:
		remove loop-player from team entries of (team of loop-player)
		set {_n} to 0
		if size of all players < 1:
			if team of loop-player is {_winners}:
				set {_n} to 20
				add 1 to {wins::%loop-player's uuid%}
			else:
				add 1 to {losses::%loop-player's uuid%}

			add {game.kills::%loop-player's uuid%} + {_n} to {points::%loop-player's uuid%}

		send "%newline%&aGAME SUMMARY:" to loop-player
		send "&7Kills: &e%{game.kills::%loop-player's uuid%} ? 0%" to loop-player
		send "&7Points Earned: &e%({game.kills::%loop-player's uuid%} + {_n}) ? 0%" to loop-player
		updateScoreboard(loop-player)

	clear {game.kills::*}

function checkWinners(w: world, p: string) :: team:
	set {_arg2} to {_p} parsed as player
	if {_arg2} is a player:
		if team of {_arg2} is team named "a-humans":
			set {_n} to 1
	else:
		set {_n} to 0

	set {_s} to size of all players in {_w} where [team of input is team named "b-zombies"]
	if {_s} + {_n} = size of all players in {_w}:
		return team named "b-zombies"
		stop
	
	return team named "a-humans"

function registerMap(map_name: string, loc: location, auth: player):
	load yaml "server-data/map-data.yaml" as "maps"

	set yaml value "version" from "maps" to ((yaml value "version" from "maps") + 0.1)

	set yaml value "%{_map_name}%.loc" from "maps" to {_loc}
	set yaml value "%{_map_name}%.auth" from "maps" to {_auth}

	save yaml "maps" with an indentation of 2
	unload "maps"

function getRoodNodes(yaml_path: string) :: objects:
	load yaml {_yaml_path} as "yaml"

	loop yaml nodes of "yaml":
		loop yaml node keys loop-value from "yaml":
			set {_node::*} to loop-value-1 split at "."
			if {_rootNodes::*} does not contain {_node::1}:
				add {_node::1} to {_rootNodes::*}

	return {_rootNodes::*}
	unload "yaml"

function chooseMap():
	load yaml "server-data/map-data.yaml" as "maps"
	set {_map_names::*} to getRoodNodes("server-data/map-data.yaml")

	set {map} to random element of {_map_names::*}
	set {map.loc} to yaml value "%{map}%.loc" from "maps"
	set {map.auth} to yaml value "%{map}%.auth" from "maps"

	unload "maps"

function updateScoreboard(p: player):
	set title of {_p}'s scoreboard to "&a&lɪɴꜰᴇᴄᴛɪᴏɴ"
	set line 5 of {_p}'s scoreboard to "&7"
	set line 4 of {_p}'s scoreboard to "&7Wins: &f%{wins::%{_p}'s uuid%} ? 0%"
	set line 3 of {_p}'s scoreboard to "&7Losses: &f%{losses::%{_p}'s uuid%} ? 0%"
	set line 2 of {_p}'s scoreboard to "&7Points: &f%{points::%{_p}'s uuid%} ? 0%"
	set line 1 of {_p}'s scoreboard to "&7"
	set line 0 of {_p}'s scoreboard to "&aip.minehut.gg"
	toggle {_p}'s scoreboard on

function formatNum(n: number) :: string:
	set {_l::*} to split "k,M,B,T,Qn,Qi,Sx" at ","
	set {_i} to min(floor(log({_n})/3), size of {_l::*})
	return "%{_n}%" if {_i} <= 0
	set {_i2} to 1000^{_i}
	return "%{_n}/{_i2}%%{_l::%{_i}%}%"

function getTimeString(t: timespan) :: string:
	set {_minutes} to minutes of {_t}
	set {_seconds} to floor(mod(seconds of {_t}, 60))

	set {_minutes} to "%{_minutes}%" if {_minutes} is greater than 9 else ("0%{_minutes}%")
	set {_seconds} to "%{_seconds}%" if {_seconds} is greater than 9 else ("0%{_seconds}%")
	
	return "%{_minutes}%:%{_seconds}%"

command /registerMap <string>:
	permission: map.register
	trigger:
		registerMap(arg-1, player's location, player)

command /startGame:
	permission: op
	trigger:
		startGame(player's world)
